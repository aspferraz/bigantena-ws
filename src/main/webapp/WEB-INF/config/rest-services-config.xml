<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xmlns:oxm="http://www.springframework.org/schema/oxm"  
       xmlns:util="http://www.springframework.org/schema/util"  
       xmlns:mvc="http://www.springframework.org/schema/mvc"  
       xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                           http://www.springframework.org/schema/mvc 
                           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd  
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context-3.0.xsd  
                           http://www.springframework.org/schema/tx  
                           http://www.springframework.org/schema/tx/spring-tx.xsd                                  
                           http://www.springframework.org/schema/oxm  
                           http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd  
                           http://www.springframework.org/schema/util  
                           http://www.springframework.org/schema/util/spring-util-3.0.xsd">  
    <!--  
          Enables automatic mapping of objects to and from JSON  
    -->  
    <mvc:annotation-driven/>  
    <!--  
          Setup spring to pull in @Controller, @RequestMapping, etc Configuration scans specified packages  
          for classes configured as Spring managed beans and automatically sets up objects annotated with  
          @Controller, @Service etc.  
    -->  
    <context:component-scan base-package="com.bigantena.ws.rest" />  
    <context:component-scan base-package="com.bigantena.service" />  
    <context:component-scan base-package="com.bigantena.security" />  
    <context:component-scan base-package="com.bigantena.security.service" />  
    <context:component-scan base-package="com.bigantena.error" />  
    <context:component-scan base-package="com.bigantena.configuration" />  
    <context:component-scan base-package="com.bigantena.dao" />  
    <context:annotation-config />
    
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="bigantenadbPU" />
        <property name="dataSource" ref="postgresDataSource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
    </bean>
        
    <bean id="postgresDataSource" class = "com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="org.postgresql.Driver" />
        <!--<property name="jdbcUrl" value="jdbc:postgresql://localhost:5432/bigantena_db?createDatabaseIfNotExist=false" />-->
        <property name="jdbcUrl" value="jdbc:postgresql://server-01:5432/bigantena_db?createDatabaseIfNotExist=false" />
        <property name="user" value="bauser" />
        <property name="password" value="bapass" />
        <!-- these are C3P0 properties -->
        <!-- pool sizing -->
        <property name="initialPoolSize" value="20" />
        <property name="minPoolSize" value="20" />
        <property name="maxPoolSize" value="200" />
        <property name="acquireIncrement" value="3" />
        <property name="maxStatements" value="200" />

        <!-- retries -->
        <property name="acquireRetryAttempts" value="30" />
        <property name="acquireRetryDelay" value="30000" /> <!-- 30s -->
        <property name="breakAfterAcquireFailure" value="false" />

        <!-- refreshing connections -->
        <property name="maxIdleTime" value="3600" /> <!-- 1h -->
        <property name="maxConnectionAge" value="180" /> <!-- 3m -->

        <!-- timeouts and testing -->
        <property name="checkoutTimeout" value="30000" /> <!-- 30s -->
        <property name="idleConnectionTestPeriod" value="60" /> <!-- 60 -->
        <property name="testConnectionOnCheckout" value="true" />
        <property name="preferredTestQuery" value="SELECT 1" />
        <property name="testConnectionOnCheckin" value="true" /> 

    </bean>
      
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    <tx:annotation-driven />
    
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
    
    <!--  
          Configures view for returning JSON to the client  
    -->  
    <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">  
        <property name="contentType" value="text/plain"/> 
    </bean>  

      
<!--          maps handler methods based on HTTP paths-->
      
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <ref bean="jsonMessageConverter"/>  
            </list>  
        </property>  
    </bean>  
      
<!--          Converts JSON to POJO and vice versa  -->
      
    <bean id="jsonMessageConverter" 
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>  
</beans>  